asigno window.CoreNlpByHttpGui como un componente vue2 con nombre "CoreNlpByHttpGui" con plantilla {
  <div class="CoreNlpByHttpGui Component win7">
    <div class="window">
      <div class="title-bar">
        <div class="title-bar-text">üåê Core Natural Language Processing by HTTP</div>
      </div>
      <div class="window-body">
        <textarea v-model="texto_para_analizar" style="width:100%; min-height: 80px; resize: vertical;" placeholder="Insert text in English here..." :disabled="esta_analizando"></textarea>
        <button v-on:click="iniciar_analisis" style="width:100%;" v-if="!esta_analizando">Analyze syntax</button>
        <div v-else>
          <div role="progressbar" class="animate">
            <div :style="'width: ' + tiene_analizado_porcentaje + '%'"></div>
          </div>
        </div>
      </div>
      <div class="status-bar">
        <div class="status-bar-field">
          <div v-if="error">
            <span>‚úó Error: {{ error.message }} (type ¬´{{ error.name }}¬ª)</span>
          </div>
          <div v-else>
            <span>‚úî The app is working fine.</span>
          </div>
        </div>
      </div>
    </div>
    <template v-for="report, report_index in reportes">
      <div v-bind:key="'syntax-report-n-' + report_index">
        <div style="min-height:10px;"></div>
        <div class="window">
          <div class="title-bar">
            <div class="title-bar-text">Syntax analysis report n¬∫{{ report_index+1 }}</div>
            <div class="title-bar-controls">
              <button aria-label="Minimize" v-on:click="() => minimize_report(report_index)" v-if="report.estado_de_ventana !== 'minimizado'"></button>
              <button aria-label="Maximize" v-on:click="() => maximize_report(report_index)" v-else></button>
              <button aria-label="Close" v-on:click="() => close_report(report_index)"></button>
            </div>
          </div>
          <template v-if="report.estado_de_ventana !== 'minimizado'">
            <div class="window-body has-space">
              <div style="padding:10px;">
                <details>
                  <summary>Text:</summary>
                  <div>{{ report.text }}</div>
                </details>
                <details>
                  <summary>Response:</summary>
                  <div>{{ report.analysis }}</div>
                </details>
                <details v-if="report.visualization">
                  <summary>Visualization:</summary>
                  <div>
                    <div>A total of {{ report.visualization.length }} sentences were analyzed.</div>
                    <details v-for="frase, frase_index in report.visualization" v-bind:key="'reporte-' + report_index + '-visualizacion-frase-' + frase_index">
                      <summary>Sentence n¬∫ {{ frase_index + 1 }}: </summary>
                      <div>
                        <div style="font-weight: bold; color: #228822;">{{ extraer_texto_plano_de_ast(frase, true) }}</div>
                        <table>
                          <tbody>
                            <tr>
                              <td></td>
                            </tr>
                          </tbody>
                        </table>
                      </div>
                    </details>
                  </div>
                </details>
              </div>
            </div>
            <div class="status-bar">
              <div class="status-bar-field">
                <span>‚úî This report was made on ¬´{{ report.date }}¬ª,</span>
              </div>
            </div>
          </template>
        </div>
      </div>
    </template>
  </div>
} con l√≥gica {
  retorno {
    m√©todo data donde {
      retorno {
        tiene_analizado_porcentaje: 100,
        esta_analizando: false,
        error: undefined,
        error_timeout_id: 0,
        texto_para_analizar: "This is a request. This is another request. And another.",
        reportes: []
      }.
    }.
    propiedad methods como {
      m√©todo muestro_error con (error) donde {
        asigno this.error como error.
        hago clearTimeout(this.error_timeout_id).
        asigno this.error_timeout_id como setTimeout(una lambda donde {
          asigno this.error como undefined.
        }, 1000 * 4).
      }.
      m√©todo as√≠ncrono iniciar_analisis donde {
        asigno this.esta_analizando como true.
        creo respuesta como as√≠ncronamente una petici√≥n http
          con url "http://127.0.0.1:9095/query?q=" + this.texto_para_analizar
          con m√©todo "GET".
        apendizo {
          text: this.texto_para_analizar,
          analysis: respuesta.data,
          visualization: this.procesar_analisis(respuesta.data),
          date: un formateo de fecha a texto a partir de un nuevo Date()
        } en this.reportes.
        asigno this.esta_analizando como false.  
        hago this.$forceUpdate(true).
      } en errores hago this.muestro_error(error) despu√©s asigno this.esta_analizando como false.
      m√©todo minimize_report con (reporte_index) donde {
        asigno this.reportes[reporte_index].estado_de_ventana como "minimizado".
        hago this.$forceUpdate(true).
      }.
      m√©todo maximize_report con (reporte_index) donde {
        asigno this.reportes[reporte_index].estado_de_ventana como "maximizado".
        hago this.$forceUpdate(true).
      }.
      m√©todo close_report con (reporte_index) donde {
        hago this.reportes.splice(reporte_index, 1).
        hago this.$forceUpdate(true).
      }.
      m√©todo procesar_analisis con (reports) donde {
        creo reportes como [] concatenado por reports.result.syntax_tree.elements[0].elements.
        desde 0 hasta reportes.length {
          creo reporte como reportes[index].
          hago reporte extendido por {
            visualization: {message: "OK"}
          }.
        }.
        retorno reportes.
      } en errores imprimo error despu√©s retorno [].
      m√©todo extraer_texto_plano_de_ast con (ast, es_inicial o en su defecto false) donde {
        creo variable salida como "".
        si ast.name es igual que "leaf" {
          incremento salida en " + ¬´" + ast.attributes.value + "¬ª".
        }.
        si ast.elements {
          desde 0 hasta ast.elements.length {
            creo nodo como ast.elements[index].
            incremento salida en this.extraer_texto_plano_de_ast(nodo).
          }.
        }.
        si es_inicial {
          retorno salida.replace(" + ", "").
        }.
        retorno salida.
      }.
    }.
  }.
}.